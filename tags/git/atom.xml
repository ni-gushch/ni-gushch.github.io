<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ru">
    <title>BaldMan - git</title>
    <subtitle>Блог Николая Гущарина. Здесь можно найти статьи по .NET, создание системы умного дома, а так же про интересные инструменты для разработки.</subtitle>
    <link rel="self" type="application/atom+xml" href="https://baldman.justsquad.su/tags/git/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://baldman.justsquad.su"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-02-23T00:00:00+00:00</updated>
    <id>https://baldman.justsquad.su/tags/git/atom.xml</id>
    <entry xml:lang="ru">
        <title>Obsidian. Git синхронизация на Android.</title>
        <published>2024-08-18T00:00:00+00:00</published>
        <updated>2025-02-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://baldman.justsquad.su/obsidian-android-git-sync/"/>
        <id>https://baldman.justsquad.su/obsidian-android-git-sync/</id>
        
        <content type="html" xml:base="https://baldman.justsquad.su/obsidian-android-git-sync/">&lt;p&gt;&lt;strong&gt;Obsidian&lt;&#x2F;strong&gt; — очень удобный инструмент для работы с заметками разного рода. Можно составлять просто список дел на день, а некоторые люди пишут сценарии или наброски книг.&lt;&#x2F;p&gt;
&lt;p&gt;Но при его использовании встаёт вопрос о синхронизации данных. Конечно, можно использовать функционал облака от разработчиков Obsidian, но иногда хочется получить независимость от &quot;корпораций&quot;. И &lt;strong&gt;Obsidian&lt;&#x2F;strong&gt; может предоставить такой вариант.&lt;&#x2F;p&gt;
&lt;p&gt;Есть два способа: установить локальный сервер синхронизации, который использует CouchDB, либо можно воспользоваться системой контроля версий Git.&lt;&#x2F;p&gt;
&lt;p&gt;В этой статье пойдёт речь о том, как реализовать синхронизацию хранилища через Git на Android устройствах.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;podgotovitel-nyi-etap&quot;&gt;Подготовительный этап&lt;&#x2F;h2&gt;
&lt;p&gt;Для реализации любого способа нам обязательно нужен репозиторий, в котором будут храниться все документы. Для этого заходим туда, где будем создавать репозиторий (GitLab, GitHub...), логинимся и создаём пустой приватный репозиторий. Чтобы автоматически создалась ветка, можно сразу добавить в репозиторий файл &lt;code&gt;.gitignore&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;baldman.justsquad.su&#x2F;obsidian-android-git-sync&#x2F;.&#x2F;images&#x2F;img_1.jpg&quot; alt=&quot;github_repo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Далее нам нужно как-то клонировать этот репозиторий на Android устройство. Так как встроенной поддержки командной строки в Android нет, придётся воспользоваться сторонним приложением, которое будет эмулировать работу командной строки Unix-системы.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ustanovka-termux-i-nastroika-git&quot;&gt;Установка Termux и настройка Git&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Termux&lt;&#x2F;strong&gt; — приложение с открытым исходным кодом, которое предназначено для эмуляции командной строки Linux с поддержкой пакетного менеджера. Скачать это приложение можно как из &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;play.google.com&#x2F;store&#x2F;apps&#x2F;details?id=com.termux&amp;amp;hl=ru&quot;&gt;Google Play&lt;&#x2F;a&gt;, так и из альтернативного магазина &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;f-droid.org&#x2F;packages&#x2F;com.termux&#x2F;&quot;&gt;F-Droid&lt;&#x2F;a&gt;, в котором содержатся только приложения с открытым исходным кодом. За дополнительной информацией можно обратиться на их официальную &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.termux.com&#x2F;wiki&#x2F;Installation&quot;&gt;Wiki страничку&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Теперь запускаем приложение и начинаем устанавливать необходимые пакеты.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;pkg&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; update&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-and z-shell&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;pkg&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; upgrade&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;y&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-and z-shell&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;pkg&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; install&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;y&lt;&#x2F;span&gt; git openssh termux-api&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Теперь определим, в какой папке будут расположены репозитории Vaults. Для примера создадим папку &lt;code&gt;repos&lt;&#x2F;code&gt; в папке &lt;code&gt;Documents&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-meta z-group z-expansion z-tilde&quot;&gt;&lt;span class=&quot;z-variable z-language z-tilde z-shell&quot;&gt;~&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;storage&#x2F;shared&#x2F;Documents&#x2F;repos &lt;span class=&quot;z-punctuation z-separator z-continuation z-line z-shell&quot;&gt;\
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;mkdir &lt;span class=&quot;z-meta z-group z-expansion z-tilde&quot;&gt;&lt;span class=&quot;z-variable z-language z-tilde z-shell&quot;&gt;~&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;storage&#x2F;shared&#x2F;Documents&#x2F;repos&#x2F;obsidian&#x2F;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-cd z-shell&quot;&gt;cd&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-meta z-group z-expansion z-tilde&quot;&gt;&lt;span class=&quot;z-variable z-language z-tilde z-shell&quot;&gt;~&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;storage&#x2F;shared&#x2F;Documents&#x2F;repos&#x2F;obsidian&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Теперь нам нужно клонировать репозиторий в созданную папку.&lt;&#x2F;p&gt;
&lt;p&gt;Если бы у нас репозиторий был публичный, проблем бы не было. Но у нас он приватный, и чтобы клонировать его, нужно пройти авторизацию.&lt;&#x2F;p&gt;
&lt;p&gt;Для GitHub можно воспользоваться их фирменным CLI-приложением &lt;code&gt;gh&lt;&#x2F;code&gt;. Чтобы его установить, нужно выполнить команду:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;apt&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; install gh&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Для авторизации на сайте можно использовать:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gh&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; login&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Нужно будет выбрать способ прохождения авторизации. Я обычно выбираю через браузер... после выбора параметров вас перебросит в браузер, где нужно будет ввести дополнительно код, сгенерированный в консоли.&lt;&#x2F;p&gt;
&lt;p&gt;После подключения можно будет получить ссылку такого вида:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;baldman.justsquad.su&#x2F;obsidian-android-git-sync&#x2F;.&#x2F;images&#x2F;img_2.jpg&quot; alt=&quot;repo_link&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;И, выполнив её в консоли Termux, репозиторий будет клонирован в ту папку, в которой мы сейчас находимся.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gh&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; repo clone &lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;repo-link&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;dobavlenie-khranilishcha-v-obsidian&quot;&gt;Добавление хранилища в Obsidian&lt;&#x2F;h3&gt;
&lt;p&gt;После клонирования репозитория мы можем добавить эту папку как хранилище в Obsidian.&lt;&#x2F;p&gt;
&lt;p&gt;Если вы только скачали само приложение, на стартовом экране у вас появится кнопка &quot;Выбор папки для хранилища&quot;. Нажав её, укажите ту папку, которая была создана в результате клонирования репозитория.&lt;&#x2F;p&gt;
&lt;p&gt;Теперь все добавляемые файлы будут индексироваться &lt;code&gt;git&lt;&#x2F;code&gt;, и их можно отправлять в удалённый репозиторий.&lt;&#x2F;p&gt;
&lt;p&gt;С подготовительным этапом закончили. Теперь рассмотрим способы именно синхронизации.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ispol-zovanie-rasshireniia-git&quot;&gt;Использование расширения Git&lt;&#x2F;h2&gt;
&lt;p&gt;Самый простой способ. Он работает на любом устройстве, но разработчики пишут, что на мобильных устройствах может работать крайне нестабильно. Потому что расширение не может использовать нативные команды Git CLI, а использует библиотеку JavaScript, которая каким-то образом тоже умеет работать с Git.&lt;&#x2F;p&gt;
&lt;p&gt;У меня получилось запустить его не с первого раза. Но после удачной попытки настроить синхронизацию через командную строку, расширение заработало. Я думаю, что это было просто совпадение. Давайте пройдём по шагам.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ustanovka-rasshireniia&quot;&gt;Установка расширения&lt;&#x2F;h3&gt;
&lt;p&gt;Плагин разрабатывается сообществом, и поэтому его нет в составе &lt;code&gt;CorePlugins&lt;&#x2F;code&gt;. Нужно сначала включить поддержку &lt;code&gt;Community plugins&lt;&#x2F;code&gt;. Для этого нажмите на шестерёнку в правом верхнем углу меню.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;baldman.justsquad.su&#x2F;obsidian-android-git-sync&#x2F;.&#x2F;images&#x2F;img_3.jpg&quot; alt=&quot;obs-1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;После включаем поддержку &lt;code&gt;Community plugins&lt;&#x2F;code&gt;, как показано на рисунке.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;baldman.justsquad.su&#x2F;obsidian-android-git-sync&#x2F;.&#x2F;images&#x2F;img_5.png&quot; alt=&quot;obs-2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Далее нажимаем на просмотр списка доступных расширений.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;baldman.justsquad.su&#x2F;obsidian-android-git-sync&#x2F;.&#x2F;images&#x2F;img_6.png&quot; alt=&quot;obs-3&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;И ищем среди списка расширение с названием &lt;code&gt;Git&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;baldman.justsquad.su&#x2F;obsidian-android-git-sync&#x2F;.&#x2F;images&#x2F;img_7.png&quot; alt=&quot;obs-4&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Нажимаем на это расширение -&amp;gt; Установить -&amp;gt; Активировать. Кнопка активировать будет там, где на картинке кнопка &quot;отключить&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;baldman.justsquad.su&#x2F;obsidian-android-git-sync&#x2F;.&#x2F;images&#x2F;img_8.png&quot; alt=&quot;obs-5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Далее переходим в настройки плагина. Я установил время автоматического обновления репозитория: коммит изменений каждые 2 минуты, проверка обновлений каждые 5 минут. Так как мы всё-таки работаем одновременно на одном устройстве, не обязательно делать мгновенное обновление.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;baldman.justsquad.su&#x2F;obsidian-android-git-sync&#x2F;.&#x2F;images&#x2F;img_9.png&quot; alt=&quot;obs-5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Включаем проверку обновления при старте приложения, Push изменений после локальной фиксации и обновление локального репозитория перед отправкой в удалённый (Pull before Push).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;baldman.justsquad.su&#x2F;obsidian-android-git-sync&#x2F;.&#x2F;images&#x2F;img_10.png&quot; alt=&quot;obs-6&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Также обязательно нужно ввести свой логин, пароль (Public Access Token для GitHub, его можно получить в настройках пользователя GitHub). А также обязательно вводим имя пользователя и почту для пользователя Git.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;baldman.justsquad.su&#x2F;obsidian-android-git-sync&#x2F;.&#x2F;images&#x2F;img_11.png&quot; alt=&quot;obs-7&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Теперь у вас будет автоматически обновляться репозиторий хранилища. Вы можете заметить, что будут автоматически появляться всплывающие окна с описанием действия синхронизации.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ispol-zovanie-termux-emuliatora&quot;&gt;Использование Termux эмулятора&lt;&#x2F;h2&gt;
&lt;p&gt;Для реализации этого подхода у нас почти всё готово. Единственное, что нужно сделать, — это прописать имя пользователя и адрес электронной почты, а также настроить SSH-ключ для синхронизации. Заходим в приложение Termux и запускаем команды:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;git&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; config&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;global&lt;&#x2F;span&gt; user.name &lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;name&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;git&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; config&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;global&lt;&#x2F;span&gt; user.email &lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;email&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Чтобы получить SSH-ключ, пропишем в командной строке:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;cat&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-meta z-group z-expansion z-tilde&quot;&gt;&lt;span class=&quot;z-variable z-language z-tilde z-shell&quot;&gt;~&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;.ssh&#x2F;id_rsa.pub&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Скопируйте то, что вывелось в результате команды, идите в настройки пользователя GitHub или другого репозитория и добавьте SSH-ключ авторизации.&lt;&#x2F;p&gt;
&lt;p&gt;Минус этого подхода в том, что тут не будет никакой автоматики, и придётся прописывать все команды вручную. Но зато всё будет точно работать :D&lt;&#x2F;p&gt;
&lt;p&gt;Заходим в папку, где находится наше хранилище:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-cd z-shell&quot;&gt;cd&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-meta z-group z-expansion z-tilde&quot;&gt;&lt;span class=&quot;z-variable z-language z-tilde z-shell&quot;&gt;~&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;storage&#x2F;Documents&#x2F;repos&#x2F;obsidian&#x2F;my-obsidian-vault-repo&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Обновляем индекс удалённого репозитория:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;git&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; fetch&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;prune&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;git&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; pull&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Заметка: чтобы постоянно не использовать &lt;code&gt;prune&lt;&#x2F;code&gt; для очистки локального индекса, можно использовать глобальную настройку:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;git&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; config remote.origin.prune true&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;После синхронизации локальной копии с удалённой и добавления новых файлов можно отправить эти изменения в удалённый репозиторий. Для этого выполним следующее:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;git&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; add .&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;git&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; commit&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;m&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;message&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;git&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; push&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Вот так вручную можно обновлять данные в удалённом репозитории. Но этот способ не такой удобный. Давайте попробуем его улучшить.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ispol-zovanie-termux-i-otdel-nogo-planirovshchika-tasker&quot;&gt;Использование Termux и отдельного планировщика Tasker&lt;&#x2F;h2&gt;
&lt;p&gt;Если вы выполняли пункты, описанные ранее, то можно начать вот &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DovieW&#x2F;obsidian-android-sync&#x2F;blob&#x2F;master&#x2F;README.md&quot;&gt;ЭТУ&lt;&#x2F;a&gt; инструкцию с 7 шага, раздела &lt;strong&gt;Termux Setup&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Только в нашей ситуации папка, в которую будет клонирован скрипт, будет чуть другой:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;git&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; clone https:&#x2F;&#x2F;github.com&#x2F;DovieW&#x2F;obsidian-android-sync.git &lt;span class=&quot;z-meta z-group z-expansion z-tilde&quot;&gt;&lt;span class=&quot;z-variable z-language z-tilde z-shell&quot;&gt;~&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;storage&#x2F;shared&#x2F;Documents&#x2F;repos&#x2F;obsidian&#x2F;obsidian-android-sync&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Плюс&lt;&#x2F;strong&gt; этого метода — потенциальная автоматизация, если правильно пройти все настройки. Если же не получится поработать с приложением Tasker, то останется скрипт, который можно вызывать для синхронизации хранилища.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;.&#x2F;sync-vaults.sh&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Этот скрипт автоматически подтянет изменения из удалённого репозитория, сделает коммит и отправит его в удалённый репозиторий.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Минус&lt;&#x2F;strong&gt; этого подхода — приложение &lt;strong&gt;Tasker&lt;&#x2F;strong&gt; — ПЛАТНОЕ!!! А зачем нам использовать синхронизацию собственными руками, да ещё и платить за приложение? Но если оно уже у вас есть, то этот способ для вас.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ispol-zovanie-termux-i-planirovshchika-cron&quot;&gt;Использование Termux и планировщика cron&lt;&#x2F;h2&gt;
&lt;p&gt;Есть ещё один способ, который просто является альтернативой для предыдущего. В этом варианте мы заменяем приложение Tasker на возможности cron scheduler. Запускать и управлять им можно прямо в самом &lt;strong&gt;Termux&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Для реализации такого подхода можно воспользоваться &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;ObsidianMD&#x2F;comments&#x2F;qep4gn&#x2F;guide_obsidian_vault_github_sync_cron_on_termux&#x2F;&quot;&gt;этой инструкцией&lt;&#x2F;a&gt;. Но в качестве скрипта можно использовать тот, который мы получили в результате предыдущего способа.&lt;&#x2F;p&gt;
&lt;p&gt;С помощью cron можно очень гибко настроить время синхронизации.&lt;&#x2F;p&gt;
&lt;p&gt;На этом всё. Мы рассмотрели несколько способов реализации синхронизации хранилища через Git-репозиторий.&lt;&#x2F;p&gt;
&lt;p&gt;Если остались вопросы, то можно задать их под постами в &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;t.me&#x2F;bald_man_gushcharin&quot;&gt;tg канале&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
